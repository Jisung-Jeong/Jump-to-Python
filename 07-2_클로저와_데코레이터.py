### 07장 파이썬 날아오르기
## 07-2 클로저와 데코레이터

### 클로저란?
# 클로저는 함수 안에 내부 함수를 구현하고, 그 내부 함수를 리턴하는 함수를 말한다.
# 이 때 외부 함수는 자신이 가진 변수값 등을 함수 내부에 전달할 수 있다.
# closure.py 참고

# 이렇게 클래스로 만드는 방법이 일반적이지만, 함수로 만들어 더 간편하게 사용하는 방법이 있다.
# wrapper.py 참고


### 데코레이터란?
# 어떤 함수의 실행 시간을 측정해보자.
'''
import time

def myfunc:
    start = time.time()
    print('함수가 실행됩니다.') # 이 함수의 실행 시간 측정
    end = time.time()
    print('함수 수행시간: %f 초' % (end-start))
    
myfunc()
'''
# 실행 시간을 측정해야 할 함수가 많아질 경우, 일일이 함수 앞 뒤로 time.time() 함수를 적고.. 함수가 끝나는 부분을 찾아 또 연산식을 적고.. 할 수는 없는 노릇 아닌가.
# 이 때 클로저를 이용하면 더 효율적인 처리가 가능하다.
# decorater.py 참고

# 데코레이터는 어노테이션처럼 사용 가능하다!
# decorater2.py 참고


### *args와 **kwargs
# *args는 모든 입력 인수를 튜플로 변환하는 매개변수, **kwargs는 모든 키=값 형태의 입력 인수를 딕셔너리로 변환하는 매개변수이다.
'''
def func(*args, **kwargs):
    print(*args)
    print(**kwargs)

>>> func(1, 2, 3, name='foo', age=3)
(1, 2, 3) # 일반 입력은 args 튜플로, 
{'age': 3, 'name': 'foo} # 키=값 형태의 입력은 kwargs 딕셔너리로 저장한다.
'''