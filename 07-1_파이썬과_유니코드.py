### 07장 파이썬 날아오르기
## 07-1 파이썬과 유니코드

# 컴퓨터는 문자를 어떻게 인식할까? 문자 셋(set)을 이용하면 된다. 문자 셋은 숫자마다 문자를 매핑하여 해당 숫자를 문자로 대체하여 이해하는 방식이다.
# 문자 셋의 등장 당시에는 컴퓨터마다 문자 셋의 포맷이 달라, 데이터를 주고받는 등의 일을 할 수가 없었다.
# 이를 해결하기 위해 최초의 문자 셋 표준인 아스키(ASCII)가 탄생하게 된다.

# 그러나 아스키는 영문자, 숫자 등만 지원하기 때문에 다른 언어도 처리할 문자 셋이 필요하였다.
# 각 나라마다 각 언어를 담은 문자 셋이 만들어졌고, 한 나라 안에서도 문자 셋이 여러 개 경쟁하게 되는 문제가 발생했다.

# 이를 해결하기 위해 유니코드(unicode)가 새로운 표준으로 등장하였다. 
# 유니코드는 모든 나라의 문자를 모두 포함하도록 넉넉하게 설계되어, 세계 표준으로 자리 잡게 되었다.


### 인코딩하기
# 유니코드 문자열은 단순 문자 셋의 규칙이기 때문에, 그대로 파일에 적거나 다른 시스템으로 전송할 수 없다.
# 따라서 파일에 적거나 다른 시스템을 전송하기 위해선, 바이트 문자열로 변환해야 한다.
# 이렇게 유니코드 문자열을 바이트 문자열로 바꾸는 것을 '인코딩' 이라고 한다.
# 바이트 문자열을 읽거나 수신할 때에는 인코딩 방식을 알아야만 디코딩 할 수 있다.

a = 'Life is too short'
b = a.encode('utf-8')
print(b) # b'Life is too short'
print(type(b)) # <class 'bytes'>

# 유니코드 문자열을 바이트 문자열로 만들 때에는 위와 같이 인코딩 방식을 인수로 넘겨 주어야 한다.
# 인수를 생략하면 디폴트 값으로 utf-8이 들어간다.

# 아스키는 영문자와 숫자만 지원하기 때문에, 한글을 인코딩할 경우 오류가 발생한다.
'''
a = '한글'
b = a.encode('ascii')
print(type(b)) # UnicodeEncodeError
'''

# 한글의 경우 인코딩 방식으로 utf-8을 사용하지만, euc-kr을 사용할 수도 있다.
a = '한글'
b = a.encode('euc-kr')
print(b)
print(b.decode('euc-kr'))

# 인코딩 방식과 디코딩 방식이 다를 경우, UnicodeDecodeError 발생!
a = '한글'
b = a.encode('utf-8')
b.decode('euc-kr') # UnicodeDecodeError


### 파일을 읽을 때에도 인코딩 방식을 지정할 수 있다.
# 파일을 열 때 인코딩 방식을 지정할 수 있다.
with open('euc_kr.txt', encoding='euc-kr') as f:
    data = f.read() # data에 유니코드 문자열 들어감

data = data + '\n' + "추가 문자열"

# 파일 열고 수정한 유니코드 문자열을 인코딩 방식 지정하여 파일에 저장.
with open('euc_kr.txt', encoding='euc-kr', mode='w') as f:
    f.write(data)


### 소스 코드의 인코딩
# 파이썬 쉘이 아닌 편집기로 코딩할 때에는 인코딩이 매우 중요하다.
# 소스 코드의 인코딩은 소스 코드 가장 위에 다음과 같은 문장을 넣어야 한다.
# -*- coding: utf-8 -*-
# 파이썬 3.0부터는 utf-8이 기본값이므로, utf-8로 인코딩한 경우 생략 가능하다.

# 이를 잘못 명시하였을 경우, 문자열 처리 부분에서 인코딩 관련 오류가 발생할 수 있다.